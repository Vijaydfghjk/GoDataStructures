
Finding the max subbarry  input = {3, 1, 4, 5, 2, 0} ans = 11 

explain 4, 5, 2 is the maxcount = 11


// You can edit this code!
// Click here and start typing.
package main

import "fmt"

func maxSumSubarray(nums []int, k int) int {

	maxsum, win := 0, 0

	for i := 0; i < len(nums); i++ {

		win += nums[i]

		if i >= k-1 {

			if win > maxsum {

				maxsum = win
			}

			win -= nums[i-(k-1)]
		}

	}

	return maxsum
}
func main() {

	arr := []int{3, 1, 4, 5, 2, 0} // 11
	get := maxSumSubarray(arr, 3)
	fmt.Println(get)
}



code explain 

actual process 


max sum = 8  (3, 1, 4), max sum = 10 (1, 4,5),  maxsum =11 (4, 5, 2) maxsum= 7 (5,2,0)


higher is 11  right this what achieve the below process 



1. why this condition 

   win += nums[i]

  if i >= k-1  
     2      2
     
based on k digit it do the addition for the above condition.
 win store 3+1+4 

  

2. if win > maxsum  update the maxum
        maxsum = win 

3. we have remove the first which is 3 from total win 

   for that win -= nums[i-(k-1)]
   
        
      
