package main

import "fmt"

func binarySearch(array []int, target int) int {
	low := 0
	high := len(array) - 1

	for low <= high {
		mid := (low + high) / 2

		if array[mid] == target {
			return mid
		} else if array[mid] < target {
			low = mid + 1
		} else {
			high = mid - 1
		}
	}

	return -1
}

func main() {
	array := []int{1, 3, 5, 7, 9}
	target := 7

	index := binarySearch(array, target)

	if index == -1 {
		fmt.Println("Element not found")
	} else {
		fmt.Println("Element found at index", index)
	}
}

//1.high = 4 (since the length of array is 5, high is 5 - 1 = 4)

//2.for low <= high {: Begins a loop that continues as long as low value is less than or equal to high value.

//3.mid := (low + high) / 2: Calculates the middle index of the current subarray by taking the average of low and high and assigns it to the variable mid.

//mid = (0 + 4) / 2 = 2

//4.if array[mid] == target , Comparison: 5 == 7 (false)

//5.else if array[mid] < target low = mid + 1 = 2 + 1 = 3

//6. The loop continues:

//low = 3
//high = 4

// mid := (low + high) / 2: Calculates the new middle index of the current subarray.

//mid = (3 + 4) / 2 = 3

//7.if array[mid] == target {: Checks if the element at the mid index of array is equal to the target value.

//array[mid] = array[3] = 7
//target = 7
//Comparison: 7 == 7 (true)
