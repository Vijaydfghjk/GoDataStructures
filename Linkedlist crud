
1. Get all values
2.Insertvalue back
3.Insertvalue front
4.view all
5.Find and replace
6.Delete
7.See which is filter particular value
8. Addvalueaftervalue
9.  Addvaluebefore



package main

import "fmt"

type Node struct {
	data int
	Next *Node
}

type mylist struct {
	top *Node
}

func (a *mylist) insertatback(value int) {

	node := &Node{data: value, Next: nil}

	if a.top == nil {

		a.top = node
		return
	}

	current := a.top

	for current.Next != nil {

		current = current.Next
	}

	current.Next = node

}

func (a *mylist) insertatfront(value int) {

	new := &Node{data: value, Next: a.top}

	a.top = new

}

func (a *mylist) Addvalueaftervalue(afterval, value int) {

           //keypoint : looking for afterval value there Next : inserting a new node
	current := a.top

	for current != nil {

		if current.data == afterval {

			current.Next = &Node{data: value, Next: current.Next}

			return

		}

		current = current.Next
	}

}

func (a *mylist) Addbeforevalue(find, value int) {

      //keypoint : looking for find node and update the find node example like {find is 10, address } , and {replace 5, address 10}

	current := a.top

	if current.data == find {
		
		new := &Node{data: value, Next: a.top}
		a.top = new
		return

	}

	for current != nil {

		if current.Next.data == find {

			fmt.Println("check", current.Next)
			current.Next = &Node{data: value, Next: current.Next}
			//  {find,address}
			return
		}

		current = current.Next
	}

}
func (a *mylist) Deletenode(value int) {

	current := a.top

	if current.data == value {

		a.top = current.Next
		return

	}

	for current != nil {

		if current.Next != nil && current.Next.data == value {

			current.Next = current.Next.Next
		}

		current = current.Next
	}

}

func (a *mylist) view() {

	current := a.top

	for current != nil {

		fmt.Println(current.data)
		current = current.Next
	}

}

func (a *mylist) see(value int) {

	current := a.top

	for current != nil {

		if current.data == value {

			fmt.Println(current)
		}

		current = current.Next
	}

}

func (a *mylist) update(find, replace int) {

	current := a.top

	for current != nil {

		if current.data == find {

			current.data = replace
		}

		current = current.Next
	}

}

func main() {

	var vj mylist

	vj.insertatback(10)
	vj.insertatback(20)
	vj.insertatfront(5)
	vj.insertatback(25)
	//vj.Addvalueaftervalue(20, 3)
	//vj.view()
	
	vj.Addbeforevalue(10, 2)
	vj.view()

	//vj.Deletenode(5)
	//vj.update(5, 7)
	//vj.see(10)
	//vj.view()

}
